name: Build and Push Docker images

on:
  push:
    paths-ignore:
      - '**.md'
      - './manifests/*.*'
    # branches: ["main"]
    # paths: ["backend/**", "frontend/**"]
  pull_request:
    branches: ["main"]
    paths: ["backend/**", "frontend/**"]

env:
  GO_VERSION: 1.17
  PUSH_IMAGE: false

jobs:
  lint:
    name: Code analysis
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: run shell check
        uses: azohra/shell-linter@latest
        with:
          path: "scripts/*.sh"

      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: gofmt check
        run: |
          cd backend
          if [ "$(gofmt -s -l . | wc -l)" -ne 0 ]; then
            echo "The following files were found to be not go formatted:"
            gofmt -s -l .
            exit 1
          fi
      - name: unused-package check
        run: |
          cd backend
          make unused-package-check

      - name: golang lint
        uses: reviewdog/action-golangci-lint@v2
        with:
          workdir: backend/

  build:
    needs: [ lint ]


    name: Build and Push docker images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Enable push images for main branch
        if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/heads/main') }}
        run: |
          echo "PUSH_IMAGE=true" >> $GITHUB_ENV

      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup cache for backend
        uses: actions/cache@v3.3.1
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - name: Setup cahche for frontend
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Build backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          platforms: linux/amd64,linux/arm64
          push: ${{ env.PUSH_IMAGE }}
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/iptables-viz-backend:latest

      - name: Build frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          platforms: linux/amd64,linux/arm64
          push: ${{ env.PUSH_IMAGE }}
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/iptables-viz-frontend:latest
